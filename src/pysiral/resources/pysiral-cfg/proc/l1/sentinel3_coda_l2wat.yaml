# NOTE: A separate config file is necessary for Sentinel-3B, since the Level-1 pre-processor
#       expects one config file per platform (at least for now)
platform: sentinel3a, sentinel3b

# Information of getting an input file list
input_handler:
    
    module_name: pysiral.sentinel3.iotools
    class_name: CodaL2SralFileDiscovery
    
    options:
        local_machine_def_tag: coda_l2wat  # -> l1b_repository.$platform.$input_tag in (local_machine_def.yaml)
        lookup_dir: null  # Leave emtpy: This will be automatically filled with information from local_machine_def
        filename_search: enhanced_measurement.nc
        filename_sep: _   # character to split the filename
        tcs_str_index: 6  # index of time_coverage_start string in file (when splitting filename with filename_sep)

# Class that will generate the initial l1p data object from
# the input data
input_adapter:
    
    module_name: pysiral.sentinel3.l1_adapter
    class_name: Sentinel3CODAL2Wat
    
    # Configuration of the
    options:
        
        name: "IPF SRAL/MWR Level 2 Measurement"

        range_bin_width: 0.468465715626
        nominal_tracking_bin: 60

        # Settings for the xml manifest
        xml_manifest: xfdumanifest.xml
        xml_metadata_object_index:
            processing: 0
            acquisitionPeriod: 1
            platform: 2
            generalProductInformation: 3
            measurementOrbitReference: 4
            measurementQualityInformation: 5
            measurementFrameSet: 6
            sralProductInformation: 7

        # Translates the timeliness nomenclature to pysiral conventions
        timeliness_dict:
            NT: nrt

        # Translates instrument operate mode nomenclature to pysiral conventions
        # From the documentation in the netCDF global attributes:
        # :long_name = "Instrument operating mode : 20 Hz Ku band";
        # :flag_values = 0B, 1B, 2B; // byte
        # :flag_meanings = "LRM SAR LRM_and_SAR";
        # The flag is translated to [lrm, sar, sar]
        instr_op_mode_list: [0, 1, 1]

        # List of range corrections. The values correspond to netcdf variable names
        range_correction_targets:
            dry_troposphere: mod_dry_tropo_cor_meas_altitude_01
            wet_troposphere: mod_wet_tropo_cor_meas_altitude_01
            inverse_barometric: inv_bar_cor_01
            dynamic_atmosphere: hf_fluct_cor_01 # "Provided as a correction to the inverted barometer correction (inv_bar_cor_01)";
            ionosphere: iono_cor_alt_01_ku
            ionosphere_gim: iono_cor_gim_01_ku
            ocean_tide_elastic: ocean_tide_non_eq_01
            ocean_tide_long_period: ocean_tide_eq_01
            ocean_loading_tide: load_tide_sol1_01
            solid_earth_tide: solid_earth_tide_01
            geocentric_polar_tide: pole_tide_01
            geoid: geoid_01
        
        # List of classifiers. The values correspond to netcdf variable names
        classifier_targets:
            tracking_configuration: cl_gain_20_ku
            distance_coast: dist_coast_20_ku
            peakiness_laxon: peakiness_2_20_ku
            sigma0_ocean: sig0_ocean_20_ku
            surface_type_classification: surf_type_class_20_ku
            swh_ocean: swh_ocean_20_ku

# Output handler (will always be default handler -> only options)
output_handler:
   
    options:
        local_machine_def_tag: coda_l2wat
        version:
            source_file_tag: coda_l2wat
            version_file_tag: v1p0b1


# Settings for the pre-processor
level1_preprocessor:
    
    type: custom_orbit_segment
    
    options:
        
        # Definition of the polar ocean
        # NOTE: The target_hemisphere variable can be overwritten with the `hemisphere`
        #       command line option of the `pysiral-l1preproc` script
        polar_ocean:
            target_hemisphere: [north, south]
            polar_latitude_threshold: 45.0
            input_file_is_single_hemisphere: False
            allow_nonocean_segment_nrecords: 250
            ocean_mininum_size_nrecords: 5
    
        # Check for gaps in the input files and split at a certain gap size (in seconds)
        timestamp_discontinuities:
            split_at_time_gap_seconds: 10

        # The maximum separation in seconds for two orbits so that they cound as connected
        orbit_segment_connectivity:
            max_connected_segment_timedelta_seconds: 10
        
        # NOTE: if no options are required use an empty mapping {} instead of null!
        processing_items:
            
            # Compute the leading edge width parameters (full, first half & second half)
            - label: "Compute Leading Edge Width"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PLeadingEdgeWidth
              options:
                  tfmra_leading_edge_end: 0.95
                  tfmra_options:
                    noise_level_range_bin_idx: [0, 5]
                    first_maximum_ignore_leading_bins: 0








