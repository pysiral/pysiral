metadata:
    label: "ESA CryoTEMPO CryoSat-2 reprocessed polar ocean product"
    product_line: esa
    record_type: rep-po
    platform: cryosat2
    version: A001
    file_version_tag: "A001"
    hemisphere: north


# --- Ingest auxiliary data ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 
# 
# Usage:
#
#  - <auxdata_category>:       <- links to corresponding category in auxdata_def.yaml
#       name: <auxdata_name>   <- links auxdata_category.auxdata_name auxdata_def.yaml
#       options: {dict}        <- Options that may overwrite the ones already provided in auxdata_def.yaml
# 
# Notes: 
#
#   - The order of the auxdata definition is important as there might be dependancies of auxiliary datasets
#   
auxdata:

    # Load the
    - mss:
        name: dtu15
        options:
            latitude_range: [45.0, 90.0]

    # Load the
    - mdt:
        name: dtu17
        options:
            latitude_range: [45.0, 90.0]

    - sic:
        name: c3s_v2p0
        options:
            exception_on_error: True

    - sitype:
        name: c3s_v1p0
        options:
            fill_valid_sic_gaps: True
            exception_on_error: True

# --- Level-2 processor steps ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 

procsteps: 

    # Surface type classification algorithm
    -   module: surface
        pyclass: SICCI2SurfaceType
        options:
            sar:
                ocean:
                    peakiness_max: 5.0
                    ice_concentration_min: 5.0
                lead:
                    peakiness_min: [67.30, 66.30, 66.60, 69.90, 69.90, 69.90, 69.90, 69.90, 69.90, 76.00, 73.80, 68.60]
                    sea_ice_backscatter_min: [23.80, 23.20, 23.30, 23.40, 23.40, 23.40, 23.40, 23.40, 23.40, 28.00, 25.80, 24.10]
                    leading_edge_width_max: [0.77, 0.78, 0.78, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.72, 0.73, 0.76]
                    ice_concentration_min: 70.0
                sea_ice:
                    peakiness_max: [30.50, 28.70, 28.10, 28.50, 28.50, 28.50, 28.50, 28.50, 28.50, 35.40, 34.90, 31.90]
                    sea_ice_backscatter_min: 2.5
                    sea_ice_backscatter_max: [20.80, 19.90, 19.60, 19.00, 19.00, 19.00, 19.00, 19.00, 19.00, 25.70, 23.20, 21.10]
                    leading_edge_width_min: [1.02, 1.08, 1.10, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 0.91, 0.90, 0.97]
                    ice_concentration_min: 70.0
            sin:
                ocean:
                    peakiness_max: 5.0
                    ice_concentration_min: 5.0
                lead:
                    peakiness_min: [264.30, 257.90, 253.60, 264.60, 264.60, 264.60, 264.60, 264.60, 264.60, 291.80, 288.80, 272.60]
                    sea_ice_backscatter_min: [24.90, 25.00, 24.10, 24.50, 24.50, 24.50, 24.50, 24.50, 24.50, 29.00, 27.40, 25.80]
                    leading_edge_width_max: [1.10, 1.11, 1.13, 1.09, 1.09, 1.09, 1.09, 1.09, 1.09, 1.02, 1.03, 1.07]
                    ice_concentration_min: 70.0
                sea_ice:
                    peakiness_max: [99.40, 94.20, 89.90, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 114.40, 113.90, 103.80]
                    sea_ice_backscatter_min: 2.5
                    sea_ice_backscatter_max: [21.40, 20.90, 20.10, 19.10, 19.10, 19.10, 19.10, 19.10, 19.10, 24.30, 23.70, 22.00]
                    leading_edge_width_min: [1.55, 1.58, 1.62, 1.64, 1.64, 1.64, 1.64, 1.64, 1.64, 1.44, 1.44, 1.51]
                    ice_concentration_min: 70.0

    # Retracking algorithm dependent on surface type
    -   module: retracker
        pyclass: Level2RetrackerContainer
        options:
            lead:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    threshold: 0.5
                    offset: 0.0
                    noise_level_range_bin_idx: [0, 5]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 0
                    range_bias: [-0.022, 0.047, 0.017]
                    uncertainty:
                        type: fixed
                        value: 0.1
            sea_ice:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    threshold: 0.5
                    offset: 0.0
                    noise_level_range_bin_idx: [0, 5]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 0
                    range_bias: [-0.022, 0.047, 0.017]
                    uncertainty:
                        type: fixed
                        value: 0.1
#            ocean:
#                pyclass: cTFMRA
#                options:
#                    # if arrays than [lrm, sar, sin]
#                    threshold: 0.5
#                    offset: 0.0
#                    wfm_oversampling_factor: 10
#                    wfm_oversampling_method: linear
#                    wfm_smoothing_window_size: [11, 11, 21]
#                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
#                    first_maximum_local_order: 1
#                    range_bias: [-0.022, 0.047, 0.017]
#                    uncertainty:
#                        type: fixed
#                        value: 0.1

    # Apply the range corrections 
    -   module: l2proc.procsteps
        pyclass: L2ApplyRangeCorrections
        options:
            corrections: 
                - dry_troposphere
                - wet_troposphere
                - inverse_barometric
                - ionosphere
                - ocean_tide_elastic
                - ocean_tide_long_period
                - ocean_loading_tide
                - solid_earth_tide
                - geocentric_polar_tide

    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLASmoothedLinear
        options:
            # Can't change this to True until we solve ocean SSB?
            use_ocean_wfm: False
            smooth_filter_width_m: 100000.0
            smooth_filter_width_footprint_size: 300.0
            pre_filtering: true
            filter_max_mss_offset_m: 1.0 # in meter
            uncertainty_tiepoints_distance_max: 100000.
            uncertainty_minimum: 0.02
            uncertainty_maximum: 0.10
            marine_segment_filter:
                minimum_lead_number: 1
            tiepoint_maxdist_filter:
                maximum_distance_to_tiepoint: 200000.
                edges_only: False
                
    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLARaw
        options:
            # True here so we can gauge the ocean retracking/SSB problem.
            use_ocean_wfm: False
#            smooth_filter_width_m: 100000.0
#            smooth_filter_width_footprint_size: 300.0
#            pre_filtering: true
            filter_max_mss_offset_m: 3.0 # in meter
#            uncertainty_tiepoints_distance_max: 100000.
#            uncertainty_minimum: 0.02
#            uncertainty_maximum: 0.10
#            marine_segment_filter:
#                minimum_lead_number: 1
#            tiepoint_maxdist_filter:
#                maximum_distance_to_tiepoint: 200000.
#                edges_only: False

    # Algorithm for adding the DOT = SLA + MDT to the L2 data object
    -   module: dot
        pyclass: DynamicOceanTopography
        options: null

    # Create a filtered/smoothed version of sla
    -   module: filter
        pyclass: ParameterSmoother
        options:
            source_variable: sla
            target_variable_name: sea_level_anomaly_filtered
            target_variable_id: slaflt
            smoothing_method: lowess
            smoother_args:
#                # The lowess filter size in statsmodels implementation uses
#                # in fractions of data points to determine the filter size
#                # The lowess filter therefore computes the data fraction
#                # from the `filter_size_n_points` keyword
                filter_size_n_points: 1501
                filter_props:
                     it: 1

    # Create a filtered/smoothed version of dot
    -   module: filter
        pyclass: ParameterSmoother
        options:
            source_variable: dot
            target_variable_name: dynamic_ocean_topography_filtered
            target_variable_id: dotflt
            smoothing_method: lowess
            smoother_args:
#                # The lowess filter size in statsmodels implementation uses
#                # in fractions of data points to determine the filter size
#                # The lowess filter therefore computes the data fraction
#                # from the `filter_size_n_points` keyword
                filter_size_n_points: 1501
                filter_props:
                     it: 1

    # Create an instrument mode flag for CryoSat-2 data
    # (instrument mode = radar mode + 1)
    -   module: l2proc.procsteps
        pyclass: CS2InstrumentModeflag
        options: null