# Level-2 processor settings for CCI+ Northern hemisphere CRDP v3.0-preview-1
metadata:
    label: "ESA CCI+ ERS-1 reprocessed northern hemisphere sea-ice thickness climate data record - Fall 2020 preview 2"
    product_line: cci
    record_type: cdr
    platform: ers1
    version: v3p0-preview2
    file_version_tag: v3p0-preview2
    hemisphere: north

# Transfer data from the l1b to the l2 data object (from any data group)
# The notation is the following:
#
#   $data_group_name:
#       $l1p_varname:
#           aux_id: id of the auxiliary parameter (l2.$aux_id)
#           aux_name: long name for output definition
#
# NOTE: Any parameter will be registered as a auxiliary data object


# A list auxilliary datasets. (the tag "name" links to the corresponding tag in config/auxdata.yaml)
# NOTE: The order of the auxdata definition is important as there might be dependancies of auxiliary datasets
auxdata:

    # Add region codes
    # NOTE: It is advisable to do this in the beginning, since the following auxiliary data types can
    #       be modified depending on region code
    - region:
        name: nsidc_mod
        options: null

    # Load the
    - mss:
        name: dtu15
        options:
            latitude_range: [45.0, 90.0]

    - sic:
        name: c3s
        options:
            version: v2p0
            exception_on_error: False

    - sitype:
        name: c3s
        options:
            version: v2p0
            fill_valid_sic_gaps: True
            exception_on_error: False

    - snow:
            name: clim_w99amsr2
            options:
                daily_scaling: True
                fyi_correction_factor: 0.5

    # Note: The snow density in this class will overwrite the snow density
    #       from the W99/AMSR2 climatology (this is intended)
    - snow:
            name: snow_density_seasonal_mallett
            options:
                snow_density_uncertainty: 50.


# --- Level-2 processor steps ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 

procsteps: 

    # Transfer variables from the l1b data object to the l2 data object
    # Notation is: 
    #
    # <l1b_datagroup>:
    #        <l1b_variable_name>: [l2_auxdata_id, l2_auxdata_name]
    -   module: l2proc.procsteps
        pyclass: L1BL2TransferVariables
        options: 
            classifier:
                sigma0: [sig, sigma0]
                peakiness: [pp, pulse_peakiness]
                leading_edge_width: [lew, leading_edge_width]
                epsilon_sec: [epss, epsilon_sec]
            correction:
                dry_troposphere: [rcdt, dry_troposphere]
                wet_troposphere: [rcwt, wet_troposphere]
                inverse_barometric: [rcib, inverse_barometric]
                ionosphere: [rcio, ionosphere]
                ocean_tide_elastic: [rcote, ocean_tide_elastic]
                ocean_tide_long_period: [rcotlp, ocean_tide_long_period]
                ocean_loading_tide: [rcolt, ocean_loading_tide]
                solid_earth_tide: [rcset, solid_earth_tide]
                geocentric_polar_tide: [rcgpt,  geocentric_polar_tide]
            time_orbit:
                antenna_pitch: [toantptch, antenna_pitch]
                antenna_roll: [toantrll, antenna_roll]
                antenna_yaw: [toantyaw, antenna_yaw]
            waveform:
                is_valid: [flgwfm, flag_waveform_is_valid]

    # Surface type classification algorithm
    -   module: surface
        pyclass: SICCI2SurfaceType
        options:
            lrm:
                ocean:
                    peakiness_max: 5.0
                    ice_concentration_min: 5.0
                lead:
                    peakiness_min: [16.36, 16.72, 16.72, 16.72, 0.00, 0.00, 0.00, 0.00, 0.00, 16.68, 18.22, 16.97]
                    sea_ice_backscatter_min: [24.95, 24.35, 24.35, 24.35, 0.00, 0.00, 0.00, 0.00, 0.00, 28.52, 26.78, 25.212]
                    leading_edge_width_max: [1.18, 1.17, 1.17, 1.17, 0.00, 0.00, 0.00, 0.00, 0.00, 1.22, 1.15, 1.17]
                    ice_concentration_min: 70.0
                sea_ice:
                    peakiness_max: [7.56, 7.66, 7.66, 7.66, 0.00, 0.00, 0.00, 0.00, 0.00, 6.72, 8.32, 7.77]
                    sea_ice_backscatter_min: [9.69, 9.70, 9.70, 9.70, 0.00, 0.00, 0.00, 0.00, 0.00, 10.02, 10.23, 9.90]
                    sea_ice_backscatter_max: [17.75, 17.76, 17.76, 17.76, 0.00, 0.00, 0.00, 0.00, 0.00, 18.85, 18.90, 17.99]
                    leading_edge_width_min: [0.90, 0.90, 0.90, 0.90, 0.00, 0.00, 0.00, 0.00, 0.00, 0.93, 0.89, 0.89]
                    ice_concentration_min: 70.0

# Add elevations from other retrackers in SGDR (ERS/Envisat only)
    -   module: retracker.mock
        pyclass: SGDRMultipleElevations
        options: 
            predefined_retrackers: [ocean, ice1, ice2, sitrack]
            classifier_name_fmt: "{}_range"
            output_name_fmt: "elevation_{}"

    # Retracking algorithm dependent on surface type
    -   module: retracker
        pyclass: Level2RetrackerContainer
        options:
            lead:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    # type can be fixed, sigma_func and sitype_sigma_func
                    threshold:
                        type: fixed
                        value: 0.95
                    offset: 0.0
                    noise_level_range_bin_idx: [ 10, 20 ]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 10
                    uncertainty:
                        type: fixed
                        value: 0.15
            sea_ice:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    # type can be fixed, sigma_func and sitype_sigma_func
                    threshold:
                        type: fixed
                        value: 0.50
                    offset: 0.0
                    noise_level_range_bin_idx: [ 10, 20 ]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 10
                    uncertainty:
                        type: fixed
                        value: 0.15

    # Apply the range corrections 
    -   module: l2proc.procsteps
        pyclass: L2ApplyRangeCorrections
        options:
            corrections: 
                - dry_troposphere
                - wet_troposphere
                - inverse_barometric
                - ionosphere
                - ocean_tide_elastic
                - ocean_tide_long_period
                - ocean_loading_tide
                - solid_earth_tide
                - geocentric_polar_tide

    # Apply ERS pulse deblurring correction
    -   module: retracker.corrections
        pyclass: ERSPulseDeblurring
        options: {}

    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLASmoothedLinear
        options:
            use_ocean_wfm: False
            smooth_filter_width_m: 100000.0
            smooth_filter_width_footprint_size: 300.0
            pre_filtering: true
            pre_filter_maximum_mss_median_offset: 5.0 # in meter
            uncertainty_tiepoints_distance_max: 100000.
            uncertainty_minimum: 0.02
            uncertainty_maximum: 0.10
            marine_segment_filter:
                minimum_lead_number: 1
            tiepoint_maxdist_filter:
                maximum_distance_to_tiepoint: 200000.
                edges_only: false

    # Estimation of Radar Freeboard
    -   module: frb
        pyclass: RadarFreeboardDefault
        options: null

    # Algorithm for converting radar freeboard into freeboard
    -   module: frb
        pyclass: SnowGeometricCorrection
        options:
            vacuum_light_speed_reduction: mallett2020

    # Filter invalid freeboard values
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: frb
            target_variables: [frb]
            valid_minimum_point_value: -0.25
            valid_maximum_point_value: 2.25

    # Add sea ice density to the Level-2 object
    # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
    -   module: sit
        pyclass: AlexandrovSeaIceDensity
        options:
            fyi_density: 916.7
            myi_density: 882.0
            uncertainty:
                fyi_density: 35.7
                myi_density: 23.0

    # Algorithm for getting sea ice thickness from other l2 parameters
    -   module: sit
        pyclass: SeaIceFreeboard2SIT
        options:
            water_density: 1024.0

    # Filters after thickness computation
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: sit
            target_variables: [sit]        
            valid_minimum_point_value: -0.5
            valid_maximum_point_value: 10.5

    # Compute sea ice draft
    -   module: sit
        pyclass: L2SeaIceDraft
        options: {}
