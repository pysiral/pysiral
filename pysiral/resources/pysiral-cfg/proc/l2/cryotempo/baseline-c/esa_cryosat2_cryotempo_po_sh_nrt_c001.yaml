# Processing config for operational phase 2 sea ice processing
# Lowess length set to 1501 for consistency with FMR. Change to 333 for phase 2.2

metadata:
    label: "ESA CryoTEMPO CryoSat-2 near real-time polar ocean product"
    product_line: esa
    record_type: tds-po-nrt-C001
    platform: cryosat2
    version: C001
    file_version_tag: "C001"
    hemisphere: south


# --- Ingest auxiliary data ---
#
# A list auxilliary datasets to be ingested before the execution of the processing steps.
#
# Usage:
#
#  - <auxdata_category>:       <- links to corresponding category in auxdata_def.yaml
#       name: <auxdata_name>   <- links auxdata_category.auxdata_name auxdata_def.yaml
#       options: {dict}        <- Options that may overwrite the ones already provided in auxdata_def.yaml
#
# Notes:
#
#   - The order of the auxdata definition is important as there might be dependancies of auxiliary datasets
#
auxdata:
    - region:
        name: antarctic_seas
        options:
            # default value for all points outside the regions
            ice_free_ocean_code: 0
            region_def:
                # To be read as: [region code, region label, lon_min, lon_max, lat_limit]
                - [100, "Indian Ocean", 20.0,  90.0, -40.0]
                - [101, "Western Pacific Ocean", 90.0, 160.0, -40.0]
                - [102, "Ross Sea", 160.0,  -130.0, -40.0]
                - [103, "Bellingshausen and Amundsen Seas", -130.0, -60.0, -40.0]
                - [104, "Weddell Sea", -60.0,  20.0, -40.0]

    # Load the
    - mss:
        name: dtu21
        options:
            latitude_range: [-90.0, -45.]

    # Load the
    - mdt:
        name: dtu22
        options:
            latitude_range: [-90.0, -45.]

    - sic:
        name: osisaf-operational
        options:
            exception_on_error: False
            fill_pole_hole:
                pole_hole_lat_threshold: 87.0
                pole_hole_fill_value: 100.


# --- Level-2 processor steps ---
#
# A list auxilliary datasets to be ingested before the execution of the processing steps.

procsteps:

    -   module: l2proc.procsteps
        pyclass: L1BL2TransferVariables
        options: 
            classifier:
                sigma0: [sig, sigma0]
                peakiness: [pp, pulse_peakiness]
                leading_edge_width: [lew, leading_edge_width]
                leading_edge_quality: [leq, leading_edge_quality]
                first_maximum_power: [fmp, first_maximum_power]
                stack_standard_deviation: [ssd, stack_standard_deviation]
                stack_peakiness: [spk, stack_peakiness]
                stack_skewness: [ssk, stack_skewness]
                stack_kurtosis: [skt, stack_kurtosis]
            correction:
                dry_troposphere: [rcdt, dry_troposphere]
                wet_troposphere: [rcwt, wet_troposphere]
                dynamic_atmosphere: [rdac, dynamic_atmosphere]
                # Used to cause inverse_barometric output to be filled with DAC
                dynamic_atmosphere: [ rcib, inverse_barometric ]
                ionosphere: [rcio, ionosphere]
                ocean_tide_elastic: [rcote, ocean_tide_elastic]
                ocean_tide_long_period: [rcotlp, ocean_tide_long_period]
                ocean_loading_tide: [rcolt, ocean_loading_tide]
                solid_earth_tide: [rcset, solid_earth_tide]
                geocentric_polar_tide: [rcgpt,  geocentric_polar_tide]
            time_orbit:
                antenna_pitch: [toantptch, antenna_pitch]
                antenna_roll: [toantrll, antenna_roll]
                antenna_yaw: [toantyaw, antenna_yaw]
                orbit_flag: [tofl, orbit_flag]
            waveform:
                radar_mode: [rmwfm, radar_mode]
                is_valid: [flgwfm, flag_waveform_is_valid]

    # Compute rolling classifier statistics
    -   module: l2proc.procsteps
        pyclass: ParameterRollingStatistics
        options:
            window_size_m: 25000.
            statistics: ["sdev", "mean"]
            input_parameters:
                - pulse_peakiness
                - leading_edge_width
                - sigma0

    # Surface type classification algorithm
# Surface type classification algorithm
    # SH: This is the surface type classification algorithm for the 
    #     the new ESA CCI climate data record. There are now significantly
    #     more sea ice waveform 
    -   module: surface
        pyclass: ClassifierThresholdSurfaceType
        options:

            # This option defines the surface type order. It is important that
            # leads are classified before sea ice to fullfill the condition
            # that sea-ice waveforms are not lead waveforms.
            surface_types: [ocean, lead, sea_ice]

            # Ocean classification is based on a low pulse peakiness
            # and the sea-ice concentration based ice mask
            ocean:

                - radar_mode: lrm
                  conditions:
                      - "{sea_ice_concentration} < 15.0"

                - radar_mode: sar
                  conditions:
                      - "{sea_ice_concentration} < 15.0"
                      - "{pulse_peakiness_rolling_sdev} < 1.0"

                - radar_mode: sin
                  conditions:
                      - "{sea_ice_concentration} < 15.0"
                      - "{pulse_peakiness_rolling_sdev} < 4.0"

            # Lead waveforms are classified based on sigma0, leading edge width
            # and pulse peakiness within the sea-ice mask.
            # NOTE: No LRM data over sea ice
            lead:

                - radar_mode: sar
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} >= 66.0"
                      - "{sigma0} >= 23.0"
                      - "{leading_edge_width} <= 0.75"

                - radar_mode: sin
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} >= 260.0"
                      - "{sigma0} >= 24.0"
                      - "{leading_edge_width} <= 1.05"

            # The sea ice classification uses as many waveforms as possible
            # and reduces the classification to all waveforms within the
            # sea ice mask which are not classified as leads and have a
            # valid leading edge.
            sea_ice:

                - radar_mode: sar
                  exclude: lead
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{leading_edge_quality} <= 1.02"

                - radar_mode: sin
                  exclude: lead
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{leading_edge_quality} <= 1.02"

    # Retracking algorithm dependent on surface type
    -   module: retracker
        pyclass: Level2RetrackerContainer
        options:
            lead:
                pyclass: SAMOSAPlus
                options:
                    # if arrays than [lrm, sar, sin]
                    # Empirically derived for Baseline C by DTU
                    # Positive bias is SUBTRACTED from range
                    range_bias: [0.05, 0.05, 0.05]
                    surface_type: "polar_ocean"
                    uncertainty:
                        type: fixed
                        value: 0.1
            # sea_ice:
            #     pyclass: SAMOSAPlus
            #     options:
            #         # if arrays than [lrm, sar, sin]
            #         range_bias: [0.0, 0.0, 0.0]
            #         uncertainty:
            #             type: fixed
            #             value: 0.1
            # unknown:
            #    pyclass: SAMOSAPlus
            #    options:
            #        range_bias: [0.0, 0.0, 0.0]
            #        uncertainty:
            #            type: fixed
            #            value: 0.1

            ocean:
                pyclass: SAMOSAPlus
                options:
                    # if arrays than [lrm, sar, sin]
                    # Empirically derived for Baseline C by DTU
                    # Positive bias is SUBTRACTED from range
                    range_bias: [0.05, 0.05, 0.05]
                    surface_type: "polar_ocean"
                    uncertainty:
                        type: fixed
                        value: 0.1

    # Apply the range corrections
    -   module: l2proc.procsteps
        pyclass: L2ApplyRangeCorrections
        options:
            preserve_nan: True
            corrections:
                - dry_troposphere
                - wet_troposphere
                - dynamic_atmosphere
                - ionosphere
                - ocean_tide_elastic
                - ocean_tide_long_period
                - ocean_loading_tide
                - solid_earth_tide
                - geocentric_polar_tide

    - module: retracker.corrections
      pyclass: SSBCorrectionJason2
      options: {}

    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLASmoothedLinear
        options:
            # Can't change this to True until we solve ocean SSB?
            use_ocean_wfm: True
            smooth_filter_width_m: 100000.0
            smooth_filter_width_footprint_size: 300.0
            pre_filtering: true
            filter_max_mss_offset_m: 1.0 # in meter (DJB consider using 2 from E_TDS example)
            uncertainty_tiepoints_distance_max: 100000.
            uncertainty_minimum: 0.02
            uncertainty_maximum: 0.10
            marine_segment_filter:
                minimum_lead_number: 1
            tiepoint_maxdist_filter:
                maximum_distance_to_tiepoint: 200000.
                edges_only: False

    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLARaw
        options:
            # True here so we can gauge the ocean retracking/SSB problem.
            use_ocean_wfm: True
#            smooth_filter_width_m: 100000.0
#            smooth_filter_width_footprint_size: 300.0
#            pre_filtering: true
            filter_max_mss_offset_m: 3.0 # in meter
#            uncertainty_tiepoints_distance_max: 100000.
#            uncertainty_minimum: 0.02
#            uncertainty_maximum: 0.10
#            marine_segment_filter:
#                minimum_lead_number: 1
#            tiepoint_maxdist_filter:
#                maximum_distance_to_tiepoint: 200000.
#                edges_only: False

    # Algorithm for adding the DOT = SLA + MDT to the L2 data object
    -   module: dot
        pyclass: DynamicOceanTopography
        options: null

    # Create a filtered/smoothed version of sla
    -   module: filter
        pyclass: ParameterSmoother
        options:
            source_variable: sla
            target_variable_name: sea_level_anomaly_filtered
            target_variable_id: slaflt
            smoothing_method: lowess
            smoother_args:
#                # The lowess filter size in statsmodels implementation uses
#                # in fractions of data points to determine the filter size
#                # The lowess filter therefore computes the data fraction
#                # from the `filter_size_n_points` keyword
                # Keeping at 1501 for p2 for compatability with FRM. Change to 333 for p2.2
                filter_size_n_points: 1501
                filter_props:
                     it: 1

    # Create a filtered/smoothed version of dot
    -   module: filter
        pyclass: ParameterSmoother
        options:
            source_variable: dot
            target_variable_name: dynamic_ocean_topography_filtered
            target_variable_id: dotflt
            smoothing_method: lowess
            smoother_args:
#                # The lowess filter size in statsmodels implementation uses
#                # in fractions of data points to determine the filter size
#                # The lowess filter therefore computes the data fraction
#                # from the `filter_size_n_points` keyword
                # Keeping at 1501 for p2 for compatability with FRM. Change to 333 for p2.2
                filter_size_n_points: 1501
                filter_props:
                     it: 1

    # Create an instrument mode flag for CryoSat-2 data
    # (instrument mode = radar mode + 1)
    -   module: l2proc.procsteps
        pyclass: CS2InstrumentModeflag
        options: null
 
