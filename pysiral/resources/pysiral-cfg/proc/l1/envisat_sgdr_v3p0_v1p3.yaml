# NOTE: A separate config file is necessary for ERS-2, since the Level-1 pre-processor
#       expects one config file per platform (at least for now)
platform: envisat

# Information of getting an input file list
input_handler:
    
    module_name: pysiral.envisat.iotools
    class_name: EnvisatSGDRNC
    
    options:
        local_machine_def_tag: sgdr_v3p0  # -> l1b_repository.$platform.$input_tag in (local_machine_def.yaml)
        lookup_dir: null  # Leave emtpy: This will be automatically filled with information from local_machine_def
        # Example filename: ENV_RA_2_MWS____20021001T000511_20021001T005529_20170619T163625_3018_010_0004____PAC_R_NT_003.nc
        filename_search: ENV_RA_2_MWS____{year:04d}{month:02d}{day:02d}T*.nc
        filename_sep: _   # character to split the filename
        tcs_str_index: 5  # index of time_coverage_start string in file (when splitting filename with filename_sep)

# Class that will generate the initial l1p data object from
# the input data
input_adapter:
    
    module_name: pysiral.envisat.l1_adapter
    class_name: EnvisatSGDRNC
    
    options:
        
        name: "Envisat RA2/MWR Level 2 sensor geophysical data record (v3.0)"

        # Radar parameters
        bin_width_meter: 0.4686
        radar_mode: lrm

        # SGDR timestamp units
        sgdr_timestamp_units: seconds since 2000-01-01 00:00:00.0
        sgdr_timestamp_calendar: gregorian

        # The timeliness is fixed (always reprocessed)
        timeliness: rep

        # expression to identify 1Hz parameters (re.search(variable_identifier_1Hz, variable_name))
        # -> will be used to automatically interpolate range corrections from 1Hz to 20Hz, as these
        #    are mixed in the Envisat SGDR
        variable_identifier_1Hz: "01"
        
        range_correction_targets:
            dry_troposphere: mod_dry_tropo_cor_reanalysis_20
            wet_troposphere: mod_wet_tropo_cor_reanalysis_20
            inverse_barometric: inv_bar_cor_01
            dynamic_atmosphere: hf_fluct_cor_01
            ionosphere: iono_cor_gim_01_ku
            ocean_tide_elastic: ocean_tide_sol1_01
            ocean_tide_long_period: ocean_tide_eq_01
            ocean_loading_tide: load_tide_sol1_01
            solid_earth_tide: solid_earth_tide_01
            geocentric_polar_tide: pole_tide_01
            total_geocentric_ocean_tide: Null
        
        classifier_targets:
            peakiness_sgdr: peakiness_20_ku
            sigma0: sig0_sea_ice_20_ku
            sigma0_ice1: sig0_ice1_20_ku
            sigma0_ice2: sig0_ice2_20_ku
            leading_edge_width_ice2: width_leading_edge_ice2_20_ku
            elevation_ice1: elevation_ice1_20_ku
            geographic_correction_ice: geo_cor_range_20_ku
            chirp_band: chirp_band_20_ku
            dist_coast: dist_coast_20
            noise_power: noise_power_20
            offset_tracking: offset_tracking_20
            orb_alt_rate: orb_alt_rate_20
            range_sea_ice: range_sea_ice_20_ku
            retracking_sea_ice_qual: retracking_sea_ice_qual_20_ku
            swh_ocean: swh_ocean_20_ku
            ice1_range: range_ice1_20_ku
            ice2_range: range_ice2_20_ku
            sitrack_range: range_sea_ice_20_ku
            ocean_range: range_ocean_20_ku
            slope_first_trailing_edge_ice2: slope_first_trailing_edge_ice2_20_ku

# Output handler (will always be default handler -> only options)
output_handler:
   
    options:
        local_machine_def_tag: sgdr_v3p0
        version:
            source_file_tag: esa_sgdr_v3p0
            version_file_tag: v1p3


# Settings for the pre-processor
level1_preprocessor:
    
    type: half_orbit
    
    options:
        
        polar_ocean:
            target_hemisphere: [north, south]
            polar_latitude_threshold: 45.0
            allow_nonocean_segment_nrecords: 540
            ocean_mininum_size_nrecords: 5

        # Check for gaps in the input files and split at a certain gap size (in seconds)
        timestamp_discontinuities:
            split_at_time_gap_seconds: 10

        # The maximum separation in seconds for two orbits so that they count as connected
        orbit_segment_connectivity:
            max_connected_segment_timedelta_seconds: 30
        
        # NOTE: if no options are required use an empty mapping {} instead of null!
        processing_items:

            # Compute the leading edge width parameters (full, first half & second half)
            - label: "Compute Leading Edge Width"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PLeadingEdgeWidth
              options:
                  tfmra_leading_edge_start: 0.05
                  tfmra_leading_edge_end: 0.95
                  tfmra_options:
                      noise_level_range_bin_idx: [10, 20]
                      first_maximum_ignore_leading_bins: 10

            # Compute waveform peakiness CCI style
            - label: "Compute Waveform Peakiness"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PWaveformPeakiness
              options:
                  skip_first_range_bins: 10
                  norm_is_range_bin: True
        
            # Compute the leading edge quality indicator
            # This class will add three parameters to the l1p classifier data group: 
            #  1. Leading edge quality
            #  2. first maximum index
            #  3. first maximum power (in units of peak power)
            - label: "Compute Leading Edge Quality"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PLeadingEdgeQuality
              options:
                # Power threshold for the normalized waveform
                # that the first maximum has to exceed 
                first_maximum_normalized_power_threshold:
                    lrm: 0.5
                # Number of range bins prior to the first maximum
                # that are to compute the quality factor
                leading_edge_lookup_window:
                    lrm: 20
                # Minimum valid first maximum index
                minimum_valid_first_maximum_index:
                    lrm: 10

            # Compute the leading edge peakiness
            # This class will add three parameters to the l1p classifier data group: 
            #  1. Leading edge peakiness
            - label: "Compute Leading Edge Peakiness"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PLeadingEdgePeakiness
              options:
                # Power threshold for the normalized waveform
                # that the first maximum has to exceed
                window_size: 3

            # Compute the Late Tail to Peak Power Parameter
            # This class will one parameter to the l1p classifier data group:
            #  1. late tail to peak power
            - label: "Compute Late Tail to Peak Power (LTPP)"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PLateTail2PeakPower
              options:
                # Index Window after maximum power for late tail power
                late_tail_window_idx:
                  lrm: [20, 40]

            # Compute Trailing Edge Slope
            # This class will several parameter to the l1p classifier data group:
            #  1. trailing_edge_slope
            #  2. trailing_edge_slope_quality (pearson correlation coefficient of linear slope fit)
            - label: "Compute Trailing Edge Slope"
              stage: post_ocean_segment_extraction
              module_name: pysiral.waveform
              class_name: L1PTrailingEdgeSlope
              options:
                noise_floor_power_threshold: 0.15